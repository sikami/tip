JAVADOC

/**
 * This is a Javadoc
 */

---------------------
Class Level JavaDoc
---------------------

/**
* Hero is the main entity we'll be using to . . .
* 
* Please see the {@link com.baeldung.javadoc.Person} class for true identity
* @author Captain America
* 
*/
public class SuperHero extends Person {
    // fields and methods
}

--------------------
Field Level JavaDoc
--------------------
/**
 * The public name of a hero that is common knowledge
 */
private String heroName;

-------------------
Method Level JavaDoc
-------------------

/**
 * <p>This is a simple description of the method. . .
 * <a href="http://www.supermanisthegreatest.com">Superman!</a>
 * </p>
 * @param incomingDamage the amount of incoming damage
 * @return the amount of health hero has after attack
 * @see <a href="http://www.link_to_jira/HERO-402">HERO-402</a>
 * @since 1.0
 */
public int successfullyAttacked(int incomingDamage) {
    // do things
    return 0;
}


@param provides any useful description about a method's parameter or input it should expect
@return provides a description of what a method will or can return
@see will generate a link similar to the {@link} tag, but more in the context of a reference and not inline
@since specifies which version the class, field, or method was added to the project
@version specifies the version of the software, commonly used with %I% and %G% macros
@throws is used to further explain the cases the software would expect an exception
@deprecated gives an explanation of why code was deprecated, when it may have been deprecated, and what the alternatives are
